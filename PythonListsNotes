List :Lists are used to store multiple items in a single variable.used to store collections of data
    Creation of list  : using brackets
    thislist = ["apple", "banana", "cherry"]
Notes:  List items are ordered(, changeable, and allow duplicate values.
        List items are indexed, the first item has index [0], the second item has index [1] etc.
        Can contain different data types
        
List Length : len(thislist)
Data Types  : type(thislist) #<class 'list'>
list() Constructor : possible to use the list() constructor when creating a new list
    thislist = list(("apple", "banana", "cherry")) # note the double round-brackets


Access Items : List items are indexed and can access them by referring to the index number
print(thislist[1]) #output banana

    1. Negative Indexing : Negative indexing means start from the end
       print(thislist[-1]) #output cherry
    2. Range of Indexes : specify a range of indexes by specifying where to start and end
       print(thislist[1:2]) #output [banana, cherry]
    3. Slicing of indexes:  Is same as string
    4. Check if Item Exists : determine if a specified item is present in a list use the in keyword
       if "apple" in thislist: print("Yes") #op Yes

Change List Items : To change the value of a specific item, refer to the index number
    thislist[1] = "blackcurrant" print(thislist) #op blackcurrent
    
    1. Change a Range of Item Values: To change the value of items within a specific range
        thislist[1:3] = ["blackcurrant", "watermelon"]
        1.1 If you insert more items than you replace, the new items will be inserted where you specified, and the remaining items will move accordingly
        thislist[1:2] = ["blackcurrant", "watermelon"] #output ["apple", "blackcurrant", "watermelon", "cherry"]
        1.2 If you insert less items than you replace, the new items will be inserted where you specified, and the remaining items will move accordingly:
        thislist = ["apple", "banana", "cherry"] thislist[1:3] = ["watermelon"] #['apple', 'watermelon']
    
    
Insert List Items : To insert a new list item, without replacing any of the existing values, we can use the insert() method.
        thislist = ["apple", "banana", "cherry"]
        thislist.insert(2, "watermelon") #['apple', 'banana', 'watermelon', 'cherry']
        
Add List Items : To add an item to the end of the list, use the append() method
        thislist = ["apple", "banana", "cherry"]
        thislist.append("orange") ##['apple', 'banana', 'watermelon', 'orange']
        
Extend List : To append elements from another list to the current list, use the extend() method.
        thislist = ["apple", "banana", "cherry"]
        tropical = ["mango", "pineapple", "papaya"] 
        thislist.extend(tropical) #["apple", "banana", "cherry","mango", "pineapple", "papaya"]

    Add Any Iterable : The extend() method does not have to append lists, you can add any iterable object (tuples, sets, dictionaries etc.).
        thislist = ["apple", "banana", "cherry"]
        thistuple = ("kiwi", "orange")
        thislist.extend(thistuple) #["apple", "banana", "cherry","kiwi", "orange"]
       
Remove List Items : The remove() method removes the specified item
        thislist = ["apple", "banana", "cherry"]
        thislist.remove("banana")
        Note :If there are more than 1 item with same value, the remove method removes the first occurrence
        
        Remove Specified Index: The pop() method removes the specified index
        thislist = ["apple", "banana", "cherry"]
        thislist.pop(1) #op ["apple","cherry"]
        Note : If you do not specify the index, the pop() method removes the last item
        
        The del keyword also removes the specified index
        thislist = ["apple", "banana", "cherry"]
        del thislist[0]
        del thislist #deletes complete list
        
        
Clear the List : The clear() method empties the list.The list still remains, but it has no content
    thislist = ["apple", "banana", "cherry"]
    thislist.clear() #output []
    
Loop Lists : You can loop through the list items by using a different looping logic
    1. Using for loop:
    for x in thislist:
      print(x)
    2. While Loop
    while i < len(thislist):
        print(i)
        i++
    3. Loop Through the Index Numbers
    for i in range(len(thislist)):
      print(thislist[i])
    4. Looping Using List Comprehensions
       [print(x) for x in thislist]
       
List comprehension :  offers a shorter syntax when you want to create a new list based on the values of an existing list
    fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
    newlist = [x for x in fruits if "a" in x]
    print(newlist) $op ["apple","banana","mango"]
    
    Syntax : newlist = [expression for item in iterable if condition == True]
    newlist = [x for x in range(10)] #op [0,1,2,3,4,5,6,7,8,9]
    newlist = [x for x in range(10) if x < 5] #op [0,1,2,3,4]
    newlist = [x.upper() for x in fruits]
    
    The expression can also contain conditions, not like a filter, but as a way to manipulate the outcome:
    Example : newlist = [x if x != "banana" else "orange" for x in fruits] #['apple', 'orange', 'cherry', 'kiwi', 'mango']
    
Sort Lists :List objects have a sort() method that will sort the list alphanumerically, ascending, by default
thislist.sort()
    Sort Descending :reverse keyword, thislist.sort(reverse=True)
    Customize Sort Function:You can also customize your own function by using the keyword argument key = function.
The function will return a number that will be used to sort the list (the lowest number first):
    def myfunc(n):
        return abs(n - 50)
    thislist = [100, 50, 65, 82, 23]
    thislist.sort(key = myfunc)
    print(thislist) #[50, 65, 23, 82, 100]
    
    
    Case Insensitive Sort : By default the sort() method is case sensitive, resulting in all capital letters being sorted before lower case letters.we can use built-in functions as key functions when sorting a list.So if you want a case-insensitive sort function, use str.lower as a key function
    thislist = ["banana", "Orange", "Kiwi", "cherry"]
    thislist.sort() #['Kiwi', 'Orange', 'banana', 'cherry']
    thislist.sort(key = str.lower) #['banana', 'cherry', 'Kiwi', 'Orange']
    
    
Reverse Order : reverse the order of a list, regardless of the alphabet
    thislist.reverse()
        
Copy Lists : cannot copy a list simply by typing list2 = list1, because: list2 will only be a reference to list1, and changes made in list1 will automatically also be made in list2.
     mylist = thislist.copy()
     Use the list() method : mylist = list(thislist)
     Use the slice Operator : mylist = thislist[:]
     
Join Lists : Merge two list
    list1 = ["a", "b", "c"]
    list2 = [1, 2, 3]
    List3 = list1 + list2
    for x in list2: list1.append(x)
    list1.extend(list2)
    
List count() Method: Returns the number of elements with the specified value
Syntax list.count(value)
points = [1, 4, 2, 9, 7, 8, 9, 3, 1]

x = points.count(9) #output 2
