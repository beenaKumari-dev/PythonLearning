Python Classes and Objects : A Class is like an object constructor, or a "blueprint" for creating objects.

class MyClass:
    x = 5

obj1 = MyClass()
print(obj1.x)

The __init__() Function:built-in __init__() function.All classes have a function called __init__(), which is always executed when the class is being initiated.Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36)

print(p1.name)
print(p1.age)

The __str__() Function: __str__() function controls what should be returned when the class object is represented as a string.If the __str__() function is not set, the string representation of the object is returned:
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age
p1 = Person("John", 36)
print(p1) #output <__main__.Person object at 0x15039e602100>
def __str__(self):
    return f"{self.name}({self.age})" #John(36)

Object Methods: Objects can also contain methods. Methods in objects are functions that belong to the object.
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age
  def myfunc(self):
    print("Hello my name is " + self.name)
p1 = Person("John", 36)
p1.myfunc()
The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.It does not have to be named self, you can call it whatever you like, but it has to be the first parameter of any function in the class

Modify Object Properties : p1.age = 40
Delete Object Properties : del p1.age
Delete Objects : del p1
The pass Statement : class Person:
  pass


Python Inheritance : Inheritance allows us to define a class that inherits all the methods and properties from another class.
Parent class is the class being inherited from, also called base class.
Child class is the class that inherits from another class, also called derived class.

Add the __init__() function to the child class overrides the inheritance of the parent's __init__() function.

Use the super() Function:Python also has a super() function that will make the child class inherit all the methods and properties from its parent

Python supports several types of inheritance:
Single Inheritance: A class inherits from only one parent class.
Multiple Inheritance: A class inherits from multiple parent classes.
Multilevel Inheritance: A class inherits from a parent class, which in turn inherits from another class. 
Hierarchical Inheritance: Multiple classes inherit from a single parent class.
Hybrid Inheritance: A combination of two or more types of inheritance.


Python Iterators : An iterator is an object that contains a countable number of values.n iterator is an object that can be iterated upon, meaning that you can traverse through all the values.Even strings are iterable objects, and can return an iterato
Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__().
mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)

print(next(myit)) print(next(myit))#apple banana
Looping Through an Iterator:for x in mytuple
Create an Iterator: Need to initial under __init__ function
The __iter__() method acts similar, you can do operations (initializing etc.), but must always return the iterator object itself.
The __next__() method also allows you to do operations, and must return the next item in the sequence.

#StopIteration :To prevent the iteration from going on forever, we can use the StopIteration statement

Polymorphism:The word "polymorphism" means "many forms", and in programming it refers to methods/functions/operators with the same name that can be executed on many objects or classes. ex len() gives different as per input
Class Polymorphism: where we can have multiple classes with the same method name.
Inheritance Class Polymorphism:Yes we can use polymorphism is inheritence but it will override the parents call properties and method of the same name.

