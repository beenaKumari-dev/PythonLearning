Sets: Set items are unordered, unchangeable, and do not allow duplicate values.Set items are unchangeable, but you can remove items and add new items.Sets are unordered, so you cannot be sure in which order the items will appear.Sets are written with curly brackets.Unordered means that the items in a set do not have a defined order.A set can contain different data types

Set items can appear in a different order every time you use them, and cannot be referred to by index or key.
thisset = {"apple", "banana", "cherry"}

Note: The values True and 1 and  False and 0 are considered the same value in sets, and are treated as duplicates

len(thisset), type(thisset) #<class 'set'>

The set() Constructor : It is also possible to use the set() constructor to make a set.
thisset = set(("apple", "banana", "cherry"))

Access Set Items :You cannot access items in a set by referring to an index or a key. But you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using the in keyword.
for x in thisset:
  print(x) 
print("banana" in thisset)
print("banana" not in thisset)

Change Items : Once a set is created, you cannot change its items, but you can add new items.

Add Set Items : To add one item to a set use the add() method.
thisset.add("orange")

Add Sets : To add items from another set into the current set, use the update() method.
thisset.update(thisset2)

copy : set.copy()
x = fruits.copy()
Add Any Iterable :The object in the update() method does not have to be a set, it can be any iterable object (tuples, lists, dictionaries etc.
mylist = ["kiwi", "orange"]
thisset.update(mylist)

Remove Set Items :To remove an item in a set, use the remove(), or the discard() method.
thisset.remove("banana") # If the item to remove does not exist, remove() will raise an error.
thisset.discard("banana") # If the item to remove does not exist, discard() will NOT raise an error.
pop() : this method will remove a random item, so you cannot be sure what item that gets removed.
x = thisset.pop()

The clear() method empties the set
The del keyword will delete the set completely
del thisset
thisset.clear()

Loop Sets :You can loop through the set items by only using a for loop

Join Sets:
The union() and update() methods joins all items from both sets. #set3 = set1.union(set2) or set3 = set1 | set2, mutiple joining : set1.union(set2, set3, set4) or myset = set1 | set2 | set3 |set4

Join a Set and a Tuple
The union() method allows you to join a set with other data types, like lists or tuples.The result will be a set
x = {"a", "b", "c"}
y = (1, 2, 3)
z = x.union(y)
Note: The  | operator only allows you to join sets with sets, and not with other data types like you can with the  union() method

Update
The update() method inserts all items from one set into another.The update() changes the original set, and does not return a new set
set1.update(set2)
Note Both union() and update() will exclude any duplicate items


The intersection() method keeps ONLY the duplicates. #set3 = set1.intersection(set2), set1 & set2
Note: The & operator only allows you to join sets with sets, and not with other data types like you can with the intersection() method.

The intersection_update() method will also keep ONLY the duplicates, but it will change the original set instead of returning a new set.
Example
Keep the items that exist in both set1, and set2:
set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set1.intersection_update(set2)

The difference() method keeps the items from the first set that are not in the other set(s).#set3 = set1.difference(set2),set3 = set1 - set2
Note: The - operator only allows you to join sets with sets, and not with other data types like you can with the difference() method.

The difference_update() method will also keep the items from the first set that are not in the other set, but it will change the original set instead of returning a new set.

Example
Use the difference_update() method to keep the items that are not present in both sets:

set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}

set1.difference_update(set2)

The symmetric_difference() method keeps all items EXCEPT the duplicates or  keep only the elements that are NOT present in both sets.. #set3 = set1.symmetric_difference(set2),set3 = set1 ^ set2
Note: The ^ operator only allows you to join sets with sets, and not with other data types like you can with the symmetric_difference() method.
The symmetric_difference_update() method will also keep all but the duplicates, but it will change the original set instead of returning a new set.

Example
Use the symmetric_difference_update() method to keep the items that are not present in both sets:

set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set1.symmetric_difference_update(set2)


isdisjoint() Method:eturns whether two sets have a intersection or not.Return True if no items in set x is present in set y:
x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "facebook"}

z = x.isdisjoint(y)

issubset()	<=Returns whether another set contains this set or not
 	<Returns whether all items in this set is present in other, specified set(s)
    set.issubset(set1)
    x = {"a", "b", "c"}
y = {"f", "e", "d", "c", "b", "a"}
z = x <= y
print(z) #True
issuperset() - 1. >=Returns whether this set contains another set or not
     > Returns whether all items in other, specified set(s) is present in this set
    set.issuperset(set),set >= set1
    x = {"f", "e", "d", "c", "b", "a"}
y = {"a", "b", "c"}

z = x >= y

print(z) #True