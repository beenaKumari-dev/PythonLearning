Python Functions : A function is a block of code which only runs when it is called
Creating a Function :
def function1():
	print('Hello')
Calling a Function: 
function1()

Arguments:Information can be passed into functions as arguments.Arguments are often shortened to args in Python documentations.
def my_function(fname):
  print(fname + " Refsnes")
 A parameter is the variable listed inside the parentheses in the function definition

 Arbitrary Arguments, *args :do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition.
 def my_function(*kids):
  print("The youngest child is " + kids[2])

my_function("Emil", "Tobias", "Linus")
Keyword Arguments : You can also send arguments with the key = value syntax.This way the order of the arguments does not matter.
def my_function(child3, child2, child1):
  print("The youngest child is " + child3)
my_function(child1 = "Emil", child2 = "Tobias", child3 = "Linus")

Arbitrary Keyword Arguments, **kwargs : This way the function will receive a dictionary of arguments, and can access the items accordingly
def my_function(**kid):
  print("His last name is " + kid["lname"])
my_function(fname = "Tobias", lname = "Refsnes")


Recursion : means a defined function can call itself.This has the benefit of meaning that you can loop through data to reach a result.

Python Lambda : small anonymous function and it can take any number of arguments, but can only have one expression.
lambda arguments : expression
x = lambda a : a + 10
print(x(5))
x = lambda a, b : a * b
print(x(5, 6))
def myfunc(n):
  return lambda a : a * n
mydoubler = myfunc(2)
mytripler = myfunc(3)
print(mydoubler(11))
print(mytripler(11))
Use lambda functions when an anonymous function is required for a short period of time.perfect for simplifying short-term tasks, streamlining code with higher-order functions like map, filter, or sorted
