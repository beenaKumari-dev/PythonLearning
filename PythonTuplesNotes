Tuple : A tuple is a collection which is ordered and unchangeable.Items are ordered, unchangeable, and allow duplicate values. Can contain diff data types in single var
thistuple = ("apple", "banana", "cherry")

Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created.

Tuple Length: len(thistuple)

Create Tuple With One Item
To create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple.
thistuple = ("apple",)
print(type(thistuple))
#NOT a tuple
thistuple = ("apple")
print(type(thistuple))

The tuple() Constructor : use the tuple() constructor to make a tuple
thistuple = tuple(("apple", "banana", "cherry"))

Access Tuple Items : Same as lists using brackets

Update Tuples : Once a tuple is created, you cannot change its values. Tuples are unchangeable, or immutable as it also is called.But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.
eg : x = ("apple", "banana", "cherry")
y = list(x)
y[1] = "kiwi"
x = tuple(y)
print(x)

Add Items :  Just like the workaround for changing a tuple, you can convert it into a list, add your item(s), and convert it back into a tuple
Add tuple to a tuple :  You are allowed to add tuples to tuples, so if you want to add one item, (or many), create a new tuple with the item(s), and add it to the existing tuple
thistuple = ("apple", "banana", "cherry")
y = ("orange",)
thistuple += y

Remove Items: Tuples are unchangeable, so you cannot remove items from it, but you can use the same workaround as we used for changing and adding tuple items
The del keyword can delete the tuple completely:
thistuple = ("apple", "banana", "cherry")
del thistuple
print(thistuple) #this will raise an error because the tuple no longer exists


Unpack Tuples :When we create a tuple, we normally assign values to it. This is called "packing" a tuple.we are also allowed to extract the values back into variables. This is called "unpacking"
fruits = ("apple", "banana", "cherry")
(green, yellow, red) = fruits
print(green)
print(yellow)
print(red)
Note: The number of variables must match the number of values in the tuple, if not, you must use an asterisk to collect the remaining values as a list.

Using Asterisk*
If the number of variables is less than the number of values, you can add an * to the variable name and the values will be assigned to the variable as a list:
fruits = ("apple", "banana", "cherry", "strawberry", "raspberry")
(green, yellow, *red) = fruits
print(green)
print(yellow)
print(red) #output apple, banana,['cherry', 'strawberry', 'raspberry']

If the asterisk is added to another variable name than the last, Python will assign values to the variable until the number of values left matches the number of variables left.


Loop Tuples : Same as lists
Join Tuples: Only Using plus sign or if we want to multiply the content of a tuple a given number of times, you can use the * operator:mytuple = fruits * 2

count()	Returns the number of times a specified value occurs in a tuple
index()	Searches the tuple for a specified value and returns the position of where it was found

