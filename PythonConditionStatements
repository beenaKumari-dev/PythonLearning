If else condition:
execute different blocks of code based on whether a condition is true or false
if b > a:
  print("b is greater than a") #Indentation is important
elif a == b:
print("a and b are equal") #raise error
else:print("a is greater than b")#this is ok

Short Hand If:if a > b: print("a is greater than b")
Short Hand If ... Else : print("A") if a > b else print("B") #No colon 
This technique is known as Ternary Operators, or Conditional Expressions.
print("A") if a > b else print("=") if a == b else print("B") #o/p A
print("A") if a > b else print("=") if a != b else print("B") #o/p B

The pass Statement: if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error.

Python Match: The match statement is used to perform different actions based on different conditions.
match expression:
  case x:
    code block
  case y:
    code block
  case z:
    code block
ex day = 4
match day:
  case 1:
    print("Monday")
  case 2:
    print("Tuesday")
  case 3:
    print("Wednesday")
  case 4:
    print("Thursday")
Default Value :Use the underscore character _ as the last case value if you want a code block to execute when there are not other matches:
    case _:
    print("Looking forward to the Weekend")

Combine Values:Use the pipe character | as an or operator in the case evaluation to check for more than one value match in one case:
case 1 | 2 | 3 | 4 | 5:
    print("Today is a weekday")
  case 6 | 7:
    print("I love weekends!")
If Statements as Guards
case 1 | 2 | 3 | 4 | 5 if month == 4:
    print("A weekday in April")
  case 1 | 2 | 3 | 4 | 5 if month == 5:
    print("A weekday in May")
    
Python While Loops:With the while loop we can execute a set of statements as long as a condition is true.
while i < 6:
  print(i)
  i += 1
The break Statement :With the break statement we can stop the loop even if the while condition is true
The continue Statement: we can stop the current iteration, and continue with the next
The else Statement:With the else statement we can run a block of code once when the condition no longer is true
i = 0
while i < 6:
  i += 1
  if i > 4:
      break
  if i == 3:
    continue
  print(i)
else:
  print("i is no longer less than 6")
  
  
Python For Loops:iterating over a sequence
for x in fruits:
  print(x)
Looping Through a String: for x in "banana":
The break ,pass and continue Statement is same 
The range() Function for x in range(6) 0-5 range(start(optional default 0),end,increment(optional default 1))
for x in range(6):
  print(x)
else:
  print("Finally finished!")
Note :The else block will NOT be executed if the loop is stopped by a break statement.
Nested Loops :A nested loop is a loop inside a loop.